/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * API Geo
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  HTTPValidationError,
  RegionCreate,
  RegionRead,
  RegionSearch,
  RegionUpdate,
  SearchRegionsApiRegionGetParams,
} from "../../model";
import { customInstance } from "../../../orvalAxios";

/**
 * Get full information about the region by ID.
 * @summary Get Region By Id
 */
export const getRegionByIdApiRegionIdGet = (
  id: number,
  signal?: AbortSignal,
) => {
  return customInstance<RegionRead>({
    url: `/api/region/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetRegionByIdApiRegionIdGetQueryKey = (id: number) => {
  return [`/api/region/${id}`] as const;
};

export const getGetRegionByIdApiRegionIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getRegionByIdApiRegionIdGet>>,
  TError = HTTPValidationError,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRegionByIdApiRegionIdGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRegionByIdApiRegionIdGetQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRegionByIdApiRegionIdGet>>
  > = ({ signal }) => getRegionByIdApiRegionIdGet(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRegionByIdApiRegionIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRegionByIdApiRegionIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRegionByIdApiRegionIdGet>>
>;
export type GetRegionByIdApiRegionIdGetQueryError = HTTPValidationError;

/**
 * @summary Get Region By Id
 */
export const useGetRegionByIdApiRegionIdGet = <
  TData = Awaited<ReturnType<typeof getRegionByIdApiRegionIdGet>>,
  TError = HTTPValidationError,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRegionByIdApiRegionIdGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRegionByIdApiRegionIdGetQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Delete a region.
 * @summary Delete Region
 */
export const deleteRegionApiRegionIdDelete = (id: number) => {
  return customInstance<RegionRead>({
    url: `/api/region/${id}`,
    method: "DELETE",
  });
};

export const getDeleteRegionApiRegionIdDeleteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRegionApiRegionIdDelete>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRegionApiRegionIdDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRegionApiRegionIdDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteRegionApiRegionIdDelete(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteRegionApiRegionIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRegionApiRegionIdDelete>>
>;

export type DeleteRegionApiRegionIdDeleteMutationError = HTTPValidationError;

/**
 * @summary Delete Region
 */
export const useDeleteRegionApiRegionIdDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRegionApiRegionIdDelete>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteRegionApiRegionIdDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteRegionApiRegionIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Change the region.
 * @summary Update Region
 */
export const updateRegionApiRegionIdPatch = (
  id: number,
  regionUpdate: RegionUpdate,
) => {
  return customInstance<RegionRead>({
    url: `/api/region/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: regionUpdate,
  });
};

export const getUpdateRegionApiRegionIdPatchMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateRegionApiRegionIdPatch>>,
    TError,
    { id: number; data: RegionUpdate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateRegionApiRegionIdPatch>>,
  TError,
  { id: number; data: RegionUpdate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateRegionApiRegionIdPatch>>,
    { id: number; data: RegionUpdate }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateRegionApiRegionIdPatch(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateRegionApiRegionIdPatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateRegionApiRegionIdPatch>>
>;
export type UpdateRegionApiRegionIdPatchMutationBody = RegionUpdate;
export type UpdateRegionApiRegionIdPatchMutationError = HTTPValidationError;

/**
 * @summary Update Region
 */
export const useUpdateRegionApiRegionIdPatch = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateRegionApiRegionIdPatch>>,
    TError,
    { id: number; data: RegionUpdate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateRegionApiRegionIdPatch>>,
  TError,
  { id: number; data: RegionUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateRegionApiRegionIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Search regions by name. Or get information about all regions.
 * @summary Search Regions
 */
export const searchRegionsApiRegionGet = (
  params?: SearchRegionsApiRegionGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<RegionSearch>({
    url: `/api/region/`,
    method: "GET",
    params,
    signal,
  });
};

export const getSearchRegionsApiRegionGetQueryKey = (
  params?: SearchRegionsApiRegionGetParams,
) => {
  return [`/api/region/`, ...(params ? [params] : [])] as const;
};

export const getSearchRegionsApiRegionGetQueryOptions = <
  TData = Awaited<ReturnType<typeof searchRegionsApiRegionGet>>,
  TError = HTTPValidationError,
>(
  params?: SearchRegionsApiRegionGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchRegionsApiRegionGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSearchRegionsApiRegionGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchRegionsApiRegionGet>>
  > = ({ signal }) => searchRegionsApiRegionGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchRegionsApiRegionGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchRegionsApiRegionGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchRegionsApiRegionGet>>
>;
export type SearchRegionsApiRegionGetQueryError = HTTPValidationError;

/**
 * @summary Search Regions
 */
export const useSearchRegionsApiRegionGet = <
  TData = Awaited<ReturnType<typeof searchRegionsApiRegionGet>>,
  TError = HTTPValidationError,
>(
  params?: SearchRegionsApiRegionGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchRegionsApiRegionGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSearchRegionsApiRegionGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create a new region.
 * @summary Add Region
 */
export const addRegionApiRegionPost = (regionCreate: RegionCreate) => {
  return customInstance<RegionRead>({
    url: `/api/region/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: regionCreate,
  });
};

export const getAddRegionApiRegionPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addRegionApiRegionPost>>,
    TError,
    { data: RegionCreate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addRegionApiRegionPost>>,
  TError,
  { data: RegionCreate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addRegionApiRegionPost>>,
    { data: RegionCreate }
  > = (props) => {
    const { data } = props ?? {};

    return addRegionApiRegionPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddRegionApiRegionPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addRegionApiRegionPost>>
>;
export type AddRegionApiRegionPostMutationBody = RegionCreate;
export type AddRegionApiRegionPostMutationError = HTTPValidationError;

/**
 * @summary Add Region
 */
export const useAddRegionApiRegionPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addRegionApiRegionPost>>,
    TError,
    { data: RegionCreate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof addRegionApiRegionPost>>,
  TError,
  { data: RegionCreate },
  TContext
> => {
  const mutationOptions = getAddRegionApiRegionPostMutationOptions(options);

  return useMutation(mutationOptions);
};
