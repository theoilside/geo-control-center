/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * API Geo
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  HTTPValidationError,
  RailwayCreate,
  RailwayRead,
  RailwaySearch,
  RailwayUpdate,
  SearchRailwayApiRailwayGetParams,
} from "../../model";
import { customInstance } from "../../../orvalAxios";

/**
 * Get full information about the railway station by ID.
 * @summary Get Railway By Id
 */
export const getRailwayByIdApiRailwayIdGet = (
  id: number,
  signal?: AbortSignal,
) => {
  return customInstance<RailwayRead>({
    url: `/api/railway/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetRailwayByIdApiRailwayIdGetQueryKey = (id: number) => {
  return [`/api/railway/${id}`] as const;
};

export const getGetRailwayByIdApiRailwayIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getRailwayByIdApiRailwayIdGet>>,
  TError = HTTPValidationError,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRailwayByIdApiRailwayIdGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRailwayByIdApiRailwayIdGetQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRailwayByIdApiRailwayIdGet>>
  > = ({ signal }) => getRailwayByIdApiRailwayIdGet(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRailwayByIdApiRailwayIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRailwayByIdApiRailwayIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRailwayByIdApiRailwayIdGet>>
>;
export type GetRailwayByIdApiRailwayIdGetQueryError = HTTPValidationError;

/**
 * @summary Get Railway By Id
 */
export const useGetRailwayByIdApiRailwayIdGet = <
  TData = Awaited<ReturnType<typeof getRailwayByIdApiRailwayIdGet>>,
  TError = HTTPValidationError,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRailwayByIdApiRailwayIdGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRailwayByIdApiRailwayIdGetQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Delete a railway station.
 * @summary Delete Railway
 */
export const deleteRailwayApiRailwayIdDelete = (id: number) => {
  return customInstance<RailwayRead>({
    url: `/api/railway/${id}`,
    method: "DELETE",
  });
};

export const getDeleteRailwayApiRailwayIdDeleteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRailwayApiRailwayIdDelete>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRailwayApiRailwayIdDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRailwayApiRailwayIdDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteRailwayApiRailwayIdDelete(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteRailwayApiRailwayIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRailwayApiRailwayIdDelete>>
>;

export type DeleteRailwayApiRailwayIdDeleteMutationError = HTTPValidationError;

/**
 * @summary Delete Railway
 */
export const useDeleteRailwayApiRailwayIdDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRailwayApiRailwayIdDelete>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteRailwayApiRailwayIdDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteRailwayApiRailwayIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Change the railway station.
 * @summary Update Railway
 */
export const updateRailwayApiRailwayIdPatch = (
  id: number,
  railwayUpdate: RailwayUpdate,
) => {
  return customInstance<RailwayRead>({
    url: `/api/railway/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: railwayUpdate,
  });
};

export const getUpdateRailwayApiRailwayIdPatchMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateRailwayApiRailwayIdPatch>>,
    TError,
    { id: number; data: RailwayUpdate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateRailwayApiRailwayIdPatch>>,
  TError,
  { id: number; data: RailwayUpdate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateRailwayApiRailwayIdPatch>>,
    { id: number; data: RailwayUpdate }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateRailwayApiRailwayIdPatch(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateRailwayApiRailwayIdPatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateRailwayApiRailwayIdPatch>>
>;
export type UpdateRailwayApiRailwayIdPatchMutationBody = RailwayUpdate;
export type UpdateRailwayApiRailwayIdPatchMutationError = HTTPValidationError;

/**
 * @summary Update Railway
 */
export const useUpdateRailwayApiRailwayIdPatch = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateRailwayApiRailwayIdPatch>>,
    TError,
    { id: number; data: RailwayUpdate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateRailwayApiRailwayIdPatch>>,
  TError,
  { id: number; data: RailwayUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateRailwayApiRailwayIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Search railway by name and express3 code. Or get information about all railways.
 * @summary Search Railway
 */
export const searchRailwayApiRailwayGet = (
  params?: SearchRailwayApiRailwayGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<RailwaySearch>({
    url: `/api/railway/`,
    method: "GET",
    params,
    signal,
  });
};

export const getSearchRailwayApiRailwayGetQueryKey = (
  params?: SearchRailwayApiRailwayGetParams,
) => {
  return [`/api/railway/`, ...(params ? [params] : [])] as const;
};

export const getSearchRailwayApiRailwayGetQueryOptions = <
  TData = Awaited<ReturnType<typeof searchRailwayApiRailwayGet>>,
  TError = HTTPValidationError,
>(
  params?: SearchRailwayApiRailwayGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchRailwayApiRailwayGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSearchRailwayApiRailwayGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchRailwayApiRailwayGet>>
  > = ({ signal }) => searchRailwayApiRailwayGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchRailwayApiRailwayGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchRailwayApiRailwayGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchRailwayApiRailwayGet>>
>;
export type SearchRailwayApiRailwayGetQueryError = HTTPValidationError;

/**
 * @summary Search Railway
 */
export const useSearchRailwayApiRailwayGet = <
  TData = Awaited<ReturnType<typeof searchRailwayApiRailwayGet>>,
  TError = HTTPValidationError,
>(
  params?: SearchRailwayApiRailwayGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchRailwayApiRailwayGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSearchRailwayApiRailwayGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create a new railway station.
 * @summary Add Railway
 */
export const addRailwayApiRailwayPost = (railwayCreate: RailwayCreate) => {
  return customInstance<RailwayRead>({
    url: `/api/railway/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: railwayCreate,
  });
};

export const getAddRailwayApiRailwayPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addRailwayApiRailwayPost>>,
    TError,
    { data: RailwayCreate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addRailwayApiRailwayPost>>,
  TError,
  { data: RailwayCreate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addRailwayApiRailwayPost>>,
    { data: RailwayCreate }
  > = (props) => {
    const { data } = props ?? {};

    return addRailwayApiRailwayPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddRailwayApiRailwayPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addRailwayApiRailwayPost>>
>;
export type AddRailwayApiRailwayPostMutationBody = RailwayCreate;
export type AddRailwayApiRailwayPostMutationError = HTTPValidationError;

/**
 * @summary Add Railway
 */
export const useAddRailwayApiRailwayPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addRailwayApiRailwayPost>>,
    TError,
    { data: RailwayCreate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof addRailwayApiRailwayPost>>,
  TError,
  { data: RailwayCreate },
  TContext
> => {
  const mutationOptions = getAddRailwayApiRailwayPostMutationOptions(options);

  return useMutation(mutationOptions);
};
