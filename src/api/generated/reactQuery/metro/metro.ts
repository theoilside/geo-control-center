/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * API Geo
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  HTTPValidationError,
  MetroCreate,
  MetroRead,
  MetroSearch,
  MetroUpdate,
  SearchMetroApiMetroGetParams,
} from "../../model";
import { customInstance } from "../../../orvalAxios";

/**
 * Get full information about the metro by ID.
 * @summary Get Metro By Id
 */
export const getMetroByIdApiMetroIdGet = (id: number, signal?: AbortSignal) => {
  return customInstance<MetroRead>({
    url: `/api/metro/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetMetroByIdApiMetroIdGetQueryKey = (id: number) => {
  return [`/api/metro/${id}`] as const;
};

export const getGetMetroByIdApiMetroIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getMetroByIdApiMetroIdGet>>,
  TError = HTTPValidationError,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMetroByIdApiMetroIdGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMetroByIdApiMetroIdGetQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMetroByIdApiMetroIdGet>>
  > = ({ signal }) => getMetroByIdApiMetroIdGet(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMetroByIdApiMetroIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetMetroByIdApiMetroIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMetroByIdApiMetroIdGet>>
>;
export type GetMetroByIdApiMetroIdGetQueryError = HTTPValidationError;

/**
 * @summary Get Metro By Id
 */
export const useGetMetroByIdApiMetroIdGet = <
  TData = Awaited<ReturnType<typeof getMetroByIdApiMetroIdGet>>,
  TError = HTTPValidationError,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMetroByIdApiMetroIdGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMetroByIdApiMetroIdGetQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Delete a metro.
 * @summary Delete City
 */
export const deleteCityApiMetroIdDelete = (id: number) => {
  return customInstance<MetroRead>({
    url: `/api/metro/${id}`,
    method: "DELETE",
  });
};

export const getDeleteCityApiMetroIdDeleteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCityApiMetroIdDelete>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCityApiMetroIdDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCityApiMetroIdDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteCityApiMetroIdDelete(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCityApiMetroIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCityApiMetroIdDelete>>
>;

export type DeleteCityApiMetroIdDeleteMutationError = HTTPValidationError;

/**
 * @summary Delete City
 */
export const useDeleteCityApiMetroIdDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCityApiMetroIdDelete>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCityApiMetroIdDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteCityApiMetroIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Change the metro.
 * @summary Update Metro
 */
export const updateMetroApiMetroIdPatch = (
  id: number,
  metroUpdate: MetroUpdate,
) => {
  return customInstance<MetroRead>({
    url: `/api/metro/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: metroUpdate,
  });
};

export const getUpdateMetroApiMetroIdPatchMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMetroApiMetroIdPatch>>,
    TError,
    { id: number; data: MetroUpdate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateMetroApiMetroIdPatch>>,
  TError,
  { id: number; data: MetroUpdate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateMetroApiMetroIdPatch>>,
    { id: number; data: MetroUpdate }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateMetroApiMetroIdPatch(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateMetroApiMetroIdPatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateMetroApiMetroIdPatch>>
>;
export type UpdateMetroApiMetroIdPatchMutationBody = MetroUpdate;
export type UpdateMetroApiMetroIdPatchMutationError = HTTPValidationError;

/**
 * @summary Update Metro
 */
export const useUpdateMetroApiMetroIdPatch = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMetroApiMetroIdPatch>>,
    TError,
    { id: number; data: MetroUpdate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateMetroApiMetroIdPatch>>,
  TError,
  { id: number; data: MetroUpdate },
  TContext
> => {
  const mutationOptions = getUpdateMetroApiMetroIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Search metro by station name. Or get information about all metros.
 * @summary Search Metro
 */
export const searchMetroApiMetroGet = (
  params?: SearchMetroApiMetroGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<MetroSearch>({
    url: `/api/metro/`,
    method: "GET",
    params,
    signal,
  });
};

export const getSearchMetroApiMetroGetQueryKey = (
  params?: SearchMetroApiMetroGetParams,
) => {
  return [`/api/metro/`, ...(params ? [params] : [])] as const;
};

export const getSearchMetroApiMetroGetQueryOptions = <
  TData = Awaited<ReturnType<typeof searchMetroApiMetroGet>>,
  TError = HTTPValidationError,
>(
  params?: SearchMetroApiMetroGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchMetroApiMetroGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSearchMetroApiMetroGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchMetroApiMetroGet>>
  > = ({ signal }) => searchMetroApiMetroGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchMetroApiMetroGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchMetroApiMetroGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchMetroApiMetroGet>>
>;
export type SearchMetroApiMetroGetQueryError = HTTPValidationError;

/**
 * @summary Search Metro
 */
export const useSearchMetroApiMetroGet = <
  TData = Awaited<ReturnType<typeof searchMetroApiMetroGet>>,
  TError = HTTPValidationError,
>(
  params?: SearchMetroApiMetroGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchMetroApiMetroGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSearchMetroApiMetroGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create a new metro.
 * @summary Add Metro
 */
export const addMetroApiMetroPost = (metroCreate: MetroCreate) => {
  return customInstance<MetroRead>({
    url: `/api/metro/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: metroCreate,
  });
};

export const getAddMetroApiMetroPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addMetroApiMetroPost>>,
    TError,
    { data: MetroCreate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addMetroApiMetroPost>>,
  TError,
  { data: MetroCreate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addMetroApiMetroPost>>,
    { data: MetroCreate }
  > = (props) => {
    const { data } = props ?? {};

    return addMetroApiMetroPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddMetroApiMetroPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addMetroApiMetroPost>>
>;
export type AddMetroApiMetroPostMutationBody = MetroCreate;
export type AddMetroApiMetroPostMutationError = HTTPValidationError;

/**
 * @summary Add Metro
 */
export const useAddMetroApiMetroPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addMetroApiMetroPost>>,
    TError,
    { data: MetroCreate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof addMetroApiMetroPost>>,
  TError,
  { data: MetroCreate },
  TContext
> => {
  const mutationOptions = getAddMetroApiMetroPostMutationOptions(options);

  return useMutation(mutationOptions);
};
