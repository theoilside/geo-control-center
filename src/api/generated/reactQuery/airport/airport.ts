/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * API Geo
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AirportCreate,
  AirportRead,
  AirportSearch,
  AirportUpdate,
  HTTPValidationError,
  SearchAirportApiAirportGetParams,
} from "../../model";
import { customInstance } from "../../../orvalAxios";

/**
 * Get full information about the city by ID.
 * @summary Get Airport By Id
 */
export const getAirportByIdApiAirportIdGet = (
  id: number,
  signal?: AbortSignal,
) => {
  return customInstance<AirportRead>({
    url: `/api/airport/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetAirportByIdApiAirportIdGetQueryKey = (id: number) => {
  return [`/api/airport/${id}`] as const;
};

export const getGetAirportByIdApiAirportIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAirportByIdApiAirportIdGet>>,
  TError = HTTPValidationError,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAirportByIdApiAirportIdGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAirportByIdApiAirportIdGetQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAirportByIdApiAirportIdGet>>
  > = ({ signal }) => getAirportByIdApiAirportIdGet(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAirportByIdApiAirportIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAirportByIdApiAirportIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAirportByIdApiAirportIdGet>>
>;
export type GetAirportByIdApiAirportIdGetQueryError = HTTPValidationError;

/**
 * @summary Get Airport By Id
 */
export const useGetAirportByIdApiAirportIdGet = <
  TData = Awaited<ReturnType<typeof getAirportByIdApiAirportIdGet>>,
  TError = HTTPValidationError,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAirportByIdApiAirportIdGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAirportByIdApiAirportIdGetQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Delete a airport.
 * @summary Delete Airport
 */
export const deleteAirportApiAirportIdDelete = (id: number) => {
  return customInstance<AirportRead>({
    url: `/api/airport/${id}`,
    method: "DELETE",
  });
};

export const getDeleteAirportApiAirportIdDeleteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAirportApiAirportIdDelete>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteAirportApiAirportIdDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteAirportApiAirportIdDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteAirportApiAirportIdDelete(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteAirportApiAirportIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteAirportApiAirportIdDelete>>
>;

export type DeleteAirportApiAirportIdDeleteMutationError = HTTPValidationError;

/**
 * @summary Delete Airport
 */
export const useDeleteAirportApiAirportIdDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAirportApiAirportIdDelete>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteAirportApiAirportIdDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteAirportApiAirportIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Change the airport.
 * @summary Update Airport
 */
export const updateAirportApiAirportIdPatch = (
  id: number,
  airportUpdate: AirportUpdate,
) => {
  return customInstance<AirportRead>({
    url: `/api/airport/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: airportUpdate,
  });
};

export const getUpdateAirportApiAirportIdPatchMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAirportApiAirportIdPatch>>,
    TError,
    { id: number; data: AirportUpdate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAirportApiAirportIdPatch>>,
  TError,
  { id: number; data: AirportUpdate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAirportApiAirportIdPatch>>,
    { id: number; data: AirportUpdate }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateAirportApiAirportIdPatch(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateAirportApiAirportIdPatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAirportApiAirportIdPatch>>
>;
export type UpdateAirportApiAirportIdPatchMutationBody = AirportUpdate;
export type UpdateAirportApiAirportIdPatchMutationError = HTTPValidationError;

/**
 * @summary Update Airport
 */
export const useUpdateAirportApiAirportIdPatch = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAirportApiAirportIdPatch>>,
    TError,
    { id: number; data: AirportUpdate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateAirportApiAirportIdPatch>>,
  TError,
  { id: number; data: AirportUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateAirportApiAirportIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Search airports by name and IATA. Or get information about all airports.
 * @summary Search Airport
 */
export const searchAirportApiAirportGet = (
  params?: SearchAirportApiAirportGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<AirportSearch>({
    url: `/api/airport/`,
    method: "GET",
    params,
    signal,
  });
};

export const getSearchAirportApiAirportGetQueryKey = (
  params?: SearchAirportApiAirportGetParams,
) => {
  return [`/api/airport/`, ...(params ? [params] : [])] as const;
};

export const getSearchAirportApiAirportGetQueryOptions = <
  TData = Awaited<ReturnType<typeof searchAirportApiAirportGet>>,
  TError = HTTPValidationError,
>(
  params?: SearchAirportApiAirportGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchAirportApiAirportGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSearchAirportApiAirportGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchAirportApiAirportGet>>
  > = ({ signal }) => searchAirportApiAirportGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchAirportApiAirportGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchAirportApiAirportGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchAirportApiAirportGet>>
>;
export type SearchAirportApiAirportGetQueryError = HTTPValidationError;

/**
 * @summary Search Airport
 */
export const useSearchAirportApiAirportGet = <
  TData = Awaited<ReturnType<typeof searchAirportApiAirportGet>>,
  TError = HTTPValidationError,
>(
  params?: SearchAirportApiAirportGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchAirportApiAirportGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSearchAirportApiAirportGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create a new airport.
 * @summary Add Airport
 */
export const addAirportApiAirportPost = (airportCreate: AirportCreate) => {
  return customInstance<AirportRead>({
    url: `/api/airport/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: airportCreate,
  });
};

export const getAddAirportApiAirportPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addAirportApiAirportPost>>,
    TError,
    { data: AirportCreate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addAirportApiAirportPost>>,
  TError,
  { data: AirportCreate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addAirportApiAirportPost>>,
    { data: AirportCreate }
  > = (props) => {
    const { data } = props ?? {};

    return addAirportApiAirportPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddAirportApiAirportPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addAirportApiAirportPost>>
>;
export type AddAirportApiAirportPostMutationBody = AirportCreate;
export type AddAirportApiAirportPostMutationError = HTTPValidationError;

/**
 * @summary Add Airport
 */
export const useAddAirportApiAirportPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addAirportApiAirportPost>>,
    TError,
    { data: AirportCreate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof addAirportApiAirportPost>>,
  TError,
  { data: AirportCreate },
  TContext
> => {
  const mutationOptions = getAddAirportApiAirportPostMutationOptions(options);

  return useMutation(mutationOptions);
};
