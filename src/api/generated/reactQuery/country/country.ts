/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * API Geo
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CountryCreate,
  CountryRead,
  CountrySearch,
  CountryUpdate,
  HTTPValidationError,
  SearchCountriesApiCountryGetParams,
} from "../../model";
import { customInstance } from "../../../orvalAxios";

/**
 * Get full information about the country by ID.
 * @summary Get Country By Id
 */
export const getCountryByIdApiCountryIdGet = (
  id: number,
  signal?: AbortSignal,
) => {
  return customInstance<CountryRead>({
    url: `/api/country/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetCountryByIdApiCountryIdGetQueryKey = (id: number) => {
  return [`/api/country/${id}`] as const;
};

export const getGetCountryByIdApiCountryIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCountryByIdApiCountryIdGet>>,
  TError = HTTPValidationError,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountryByIdApiCountryIdGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCountryByIdApiCountryIdGetQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCountryByIdApiCountryIdGet>>
  > = ({ signal }) => getCountryByIdApiCountryIdGet(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCountryByIdApiCountryIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCountryByIdApiCountryIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCountryByIdApiCountryIdGet>>
>;
export type GetCountryByIdApiCountryIdGetQueryError = HTTPValidationError;

/**
 * @summary Get Country By Id
 */
export const useGetCountryByIdApiCountryIdGet = <
  TData = Awaited<ReturnType<typeof getCountryByIdApiCountryIdGet>>,
  TError = HTTPValidationError,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountryByIdApiCountryIdGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCountryByIdApiCountryIdGetQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Delete a country.
 * @summary Delete Country
 */
export const deleteCountryApiCountryIdDelete = (id: number) => {
  return customInstance<CountryRead>({
    url: `/api/country/${id}`,
    method: "DELETE",
  });
};

export const getDeleteCountryApiCountryIdDeleteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCountryApiCountryIdDelete>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCountryApiCountryIdDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCountryApiCountryIdDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteCountryApiCountryIdDelete(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCountryApiCountryIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCountryApiCountryIdDelete>>
>;

export type DeleteCountryApiCountryIdDeleteMutationError = HTTPValidationError;

/**
 * @summary Delete Country
 */
export const useDeleteCountryApiCountryIdDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCountryApiCountryIdDelete>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCountryApiCountryIdDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteCountryApiCountryIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Change the country.
 * @summary Update Country
 */
export const updateCountryApiCountryIdPatch = (
  id: number,
  countryUpdate: CountryUpdate,
) => {
  return customInstance<CountryRead>({
    url: `/api/country/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: countryUpdate,
  });
};

export const getUpdateCountryApiCountryIdPatchMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCountryApiCountryIdPatch>>,
    TError,
    { id: number; data: CountryUpdate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCountryApiCountryIdPatch>>,
  TError,
  { id: number; data: CountryUpdate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCountryApiCountryIdPatch>>,
    { id: number; data: CountryUpdate }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateCountryApiCountryIdPatch(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCountryApiCountryIdPatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCountryApiCountryIdPatch>>
>;
export type UpdateCountryApiCountryIdPatchMutationBody = CountryUpdate;
export type UpdateCountryApiCountryIdPatchMutationError = HTTPValidationError;

/**
 * @summary Update Country
 */
export const useUpdateCountryApiCountryIdPatch = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCountryApiCountryIdPatch>>,
    TError,
    { id: number; data: CountryUpdate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCountryApiCountryIdPatch>>,
  TError,
  { id: number; data: CountryUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateCountryApiCountryIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Search countries by name and ISO. Or get information about all countries.
 * @summary Search Countries
 */
export const searchCountriesApiCountryGet = (
  params?: SearchCountriesApiCountryGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<CountrySearch>({
    url: `/api/country/`,
    method: "GET",
    params,
    signal,
  });
};

export const getSearchCountriesApiCountryGetQueryKey = (
  params?: SearchCountriesApiCountryGetParams,
) => {
  return [`/api/country/`, ...(params ? [params] : [])] as const;
};

export const getSearchCountriesApiCountryGetQueryOptions = <
  TData = Awaited<ReturnType<typeof searchCountriesApiCountryGet>>,
  TError = HTTPValidationError,
>(
  params?: SearchCountriesApiCountryGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchCountriesApiCountryGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSearchCountriesApiCountryGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchCountriesApiCountryGet>>
  > = ({ signal }) => searchCountriesApiCountryGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchCountriesApiCountryGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchCountriesApiCountryGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchCountriesApiCountryGet>>
>;
export type SearchCountriesApiCountryGetQueryError = HTTPValidationError;

/**
 * @summary Search Countries
 */
export const useSearchCountriesApiCountryGet = <
  TData = Awaited<ReturnType<typeof searchCountriesApiCountryGet>>,
  TError = HTTPValidationError,
>(
  params?: SearchCountriesApiCountryGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchCountriesApiCountryGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSearchCountriesApiCountryGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create a new country.
 * @summary Add Country
 */
export const addCountryApiCountryPost = (countryCreate: CountryCreate) => {
  return customInstance<CountryRead>({
    url: `/api/country/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: countryCreate,
  });
};

export const getAddCountryApiCountryPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addCountryApiCountryPost>>,
    TError,
    { data: CountryCreate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addCountryApiCountryPost>>,
  TError,
  { data: CountryCreate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addCountryApiCountryPost>>,
    { data: CountryCreate }
  > = (props) => {
    const { data } = props ?? {};

    return addCountryApiCountryPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddCountryApiCountryPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addCountryApiCountryPost>>
>;
export type AddCountryApiCountryPostMutationBody = CountryCreate;
export type AddCountryApiCountryPostMutationError = HTTPValidationError;

/**
 * @summary Add Country
 */
export const useAddCountryApiCountryPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addCountryApiCountryPost>>,
    TError,
    { data: CountryCreate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof addCountryApiCountryPost>>,
  TError,
  { data: CountryCreate },
  TContext
> => {
  const mutationOptions = getAddCountryApiCountryPostMutationOptions(options);

  return useMutation(mutationOptions);
};
