/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * API Geo
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  DeleteLanguagesApiTranslateLanguageDeleteParams,
  DeleteTranslateApiTranslateDeleteParams,
  GetTranslateByIdApiTranslateGetParams,
  HTTPValidationError,
  Language,
  TranslateCreate,
  TranslateRead,
  TranslateUpdate,
  UpdateTranslateApiTranslatePatchParams,
} from "../../model";
import { customInstance } from "../../../orvalAxios";

/**
 * Get all translations about entity by entity name and ID.
 * @summary Get Translate By Id
 */
export const getTranslateByIdApiTranslateGet = (
  params: GetTranslateByIdApiTranslateGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<TranslateRead[]>({
    url: `/api/translate/`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetTranslateByIdApiTranslateGetQueryKey = (
  params: GetTranslateByIdApiTranslateGetParams,
) => {
  return [`/api/translate/`, ...(params ? [params] : [])] as const;
};

export const getGetTranslateByIdApiTranslateGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getTranslateByIdApiTranslateGet>>,
  TError = HTTPValidationError,
>(
  params: GetTranslateByIdApiTranslateGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTranslateByIdApiTranslateGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetTranslateByIdApiTranslateGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTranslateByIdApiTranslateGet>>
  > = ({ signal }) => getTranslateByIdApiTranslateGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTranslateByIdApiTranslateGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTranslateByIdApiTranslateGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTranslateByIdApiTranslateGet>>
>;
export type GetTranslateByIdApiTranslateGetQueryError = HTTPValidationError;

/**
 * @summary Get Translate By Id
 */
export const useGetTranslateByIdApiTranslateGet = <
  TData = Awaited<ReturnType<typeof getTranslateByIdApiTranslateGet>>,
  TError = HTTPValidationError,
>(
  params: GetTranslateByIdApiTranslateGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTranslateByIdApiTranslateGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTranslateByIdApiTranslateGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create a new translate.
 * @summary Add Translate
 */
export const addTranslateApiTranslatePost = (
  translateCreate: TranslateCreate[],
) => {
  return customInstance<TranslateRead[]>({
    url: `/api/translate/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: translateCreate,
  });
};

export const getAddTranslateApiTranslatePostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addTranslateApiTranslatePost>>,
    TError,
    { data: TranslateCreate[] },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addTranslateApiTranslatePost>>,
  TError,
  { data: TranslateCreate[] },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addTranslateApiTranslatePost>>,
    { data: TranslateCreate[] }
  > = (props) => {
    const { data } = props ?? {};

    return addTranslateApiTranslatePost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddTranslateApiTranslatePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addTranslateApiTranslatePost>>
>;
export type AddTranslateApiTranslatePostMutationBody = TranslateCreate[];
export type AddTranslateApiTranslatePostMutationError = HTTPValidationError;

/**
 * @summary Add Translate
 */
export const useAddTranslateApiTranslatePost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addTranslateApiTranslatePost>>,
    TError,
    { data: TranslateCreate[] },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof addTranslateApiTranslatePost>>,
  TError,
  { data: TranslateCreate[] },
  TContext
> => {
  const mutationOptions =
    getAddTranslateApiTranslatePostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete all translations about entity by entity name and ID.
 * @summary Delete Translate
 */
export const deleteTranslateApiTranslateDelete = (
  params: DeleteTranslateApiTranslateDeleteParams,
) => {
  return customInstance<TranslateRead[]>({
    url: `/api/translate/`,
    method: "DELETE",
    params,
  });
};

export const getDeleteTranslateApiTranslateDeleteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTranslateApiTranslateDelete>>,
    TError,
    { params: DeleteTranslateApiTranslateDeleteParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTranslateApiTranslateDelete>>,
  TError,
  { params: DeleteTranslateApiTranslateDeleteParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTranslateApiTranslateDelete>>,
    { params: DeleteTranslateApiTranslateDeleteParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteTranslateApiTranslateDelete(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTranslateApiTranslateDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTranslateApiTranslateDelete>>
>;

export type DeleteTranslateApiTranslateDeleteMutationError =
  HTTPValidationError;

/**
 * @summary Delete Translate
 */
export const useDeleteTranslateApiTranslateDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTranslateApiTranslateDelete>>,
    TError,
    { params: DeleteTranslateApiTranslateDeleteParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteTranslateApiTranslateDelete>>,
  TError,
  { params: DeleteTranslateApiTranslateDeleteParams },
  TContext
> => {
  const mutationOptions =
    getDeleteTranslateApiTranslateDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Change the translate.
 * @summary Update Translate
 */
export const updateTranslateApiTranslatePatch = (
  translateUpdate: TranslateUpdate,
  params: UpdateTranslateApiTranslatePatchParams,
) => {
  return customInstance<TranslateRead>({
    url: `/api/translate/`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: translateUpdate,
    params,
  });
};

export const getUpdateTranslateApiTranslatePatchMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTranslateApiTranslatePatch>>,
    TError,
    { data: TranslateUpdate; params: UpdateTranslateApiTranslatePatchParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTranslateApiTranslatePatch>>,
  TError,
  { data: TranslateUpdate; params: UpdateTranslateApiTranslatePatchParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTranslateApiTranslatePatch>>,
    { data: TranslateUpdate; params: UpdateTranslateApiTranslatePatchParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return updateTranslateApiTranslatePatch(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTranslateApiTranslatePatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTranslateApiTranslatePatch>>
>;
export type UpdateTranslateApiTranslatePatchMutationBody = TranslateUpdate;
export type UpdateTranslateApiTranslatePatchMutationError = HTTPValidationError;

/**
 * @summary Update Translate
 */
export const useUpdateTranslateApiTranslatePatch = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTranslateApiTranslatePatch>>,
    TError,
    { data: TranslateUpdate; params: UpdateTranslateApiTranslatePatchParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateTranslateApiTranslatePatch>>,
  TError,
  { data: TranslateUpdate; params: UpdateTranslateApiTranslatePatchParams },
  TContext
> => {
  const mutationOptions =
    getUpdateTranslateApiTranslatePatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get all languages to translate.
 * @summary Get Languages
 */
export const getLanguagesApiTranslateLanguageGet = (signal?: AbortSignal) => {
  return customInstance<Language[]>({
    url: `/api/translate/language`,
    method: "GET",
    signal,
  });
};

export const getGetLanguagesApiTranslateLanguageGetQueryKey = () => {
  return [`/api/translate/language`] as const;
};

export const getGetLanguagesApiTranslateLanguageGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getLanguagesApiTranslateLanguageGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getLanguagesApiTranslateLanguageGet>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetLanguagesApiTranslateLanguageGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLanguagesApiTranslateLanguageGet>>
  > = ({ signal }) => getLanguagesApiTranslateLanguageGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLanguagesApiTranslateLanguageGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetLanguagesApiTranslateLanguageGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLanguagesApiTranslateLanguageGet>>
>;
export type GetLanguagesApiTranslateLanguageGetQueryError = unknown;

/**
 * @summary Get Languages
 */
export const useGetLanguagesApiTranslateLanguageGet = <
  TData = Awaited<ReturnType<typeof getLanguagesApiTranslateLanguageGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getLanguagesApiTranslateLanguageGet>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetLanguagesApiTranslateLanguageGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Add a new language.
 * @summary Add Languages
 */
export const addLanguagesApiTranslateLanguagePost = (language: Language) => {
  return customInstance<Language>({
    url: `/api/translate/language`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: language,
  });
};

export const getAddLanguagesApiTranslateLanguagePostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addLanguagesApiTranslateLanguagePost>>,
    TError,
    { data: Language },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addLanguagesApiTranslateLanguagePost>>,
  TError,
  { data: Language },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addLanguagesApiTranslateLanguagePost>>,
    { data: Language }
  > = (props) => {
    const { data } = props ?? {};

    return addLanguagesApiTranslateLanguagePost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddLanguagesApiTranslateLanguagePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addLanguagesApiTranslateLanguagePost>>
>;
export type AddLanguagesApiTranslateLanguagePostMutationBody = Language;
export type AddLanguagesApiTranslateLanguagePostMutationError =
  HTTPValidationError;

/**
 * @summary Add Languages
 */
export const useAddLanguagesApiTranslateLanguagePost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addLanguagesApiTranslateLanguagePost>>,
    TError,
    { data: Language },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof addLanguagesApiTranslateLanguagePost>>,
  TError,
  { data: Language },
  TContext
> => {
  const mutationOptions =
    getAddLanguagesApiTranslateLanguagePostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete all translations about entity by entity name and ID.
 * @summary Delete Languages
 */
export const deleteLanguagesApiTranslateLanguageDelete = (
  params: DeleteLanguagesApiTranslateLanguageDeleteParams,
) => {
  return customInstance<Language>({
    url: `/api/translate/language`,
    method: "DELETE",
    params,
  });
};

export const getDeleteLanguagesApiTranslateLanguageDeleteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLanguagesApiTranslateLanguageDelete>>,
    TError,
    { params: DeleteLanguagesApiTranslateLanguageDeleteParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteLanguagesApiTranslateLanguageDelete>>,
  TError,
  { params: DeleteLanguagesApiTranslateLanguageDeleteParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteLanguagesApiTranslateLanguageDelete>>,
    { params: DeleteLanguagesApiTranslateLanguageDeleteParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteLanguagesApiTranslateLanguageDelete(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteLanguagesApiTranslateLanguageDeleteMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteLanguagesApiTranslateLanguageDelete>>
  >;

export type DeleteLanguagesApiTranslateLanguageDeleteMutationError =
  HTTPValidationError;

/**
 * @summary Delete Languages
 */
export const useDeleteLanguagesApiTranslateLanguageDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLanguagesApiTranslateLanguageDelete>>,
    TError,
    { params: DeleteLanguagesApiTranslateLanguageDeleteParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteLanguagesApiTranslateLanguageDelete>>,
  TError,
  { params: DeleteLanguagesApiTranslateLanguageDeleteParams },
  TContext
> => {
  const mutationOptions =
    getDeleteLanguagesApiTranslateLanguageDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
