/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * API Geo
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CityCreate,
  CityRead,
  CitySearch,
  CityUpdate,
  HTTPValidationError,
  SearchCitiesApiCityGetParams,
} from "../../model";
import { customInstance } from "../../../orvalAxios";

/**
 * Get full information about the city by ID.
 * @summary Get City By Id
 */
export const getCityByIdApiCityIdGet = (id: number, signal?: AbortSignal) => {
  return customInstance<CityRead>({
    url: `/api/city/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetCityByIdApiCityIdGetQueryKey = (id: number) => {
  return [`/api/city/${id}`] as const;
};

export const getGetCityByIdApiCityIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCityByIdApiCityIdGet>>,
  TError = HTTPValidationError,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCityByIdApiCityIdGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCityByIdApiCityIdGetQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCityByIdApiCityIdGet>>
  > = ({ signal }) => getCityByIdApiCityIdGet(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCityByIdApiCityIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCityByIdApiCityIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCityByIdApiCityIdGet>>
>;
export type GetCityByIdApiCityIdGetQueryError = HTTPValidationError;

/**
 * @summary Get City By Id
 */
export const useGetCityByIdApiCityIdGet = <
  TData = Awaited<ReturnType<typeof getCityByIdApiCityIdGet>>,
  TError = HTTPValidationError,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCityByIdApiCityIdGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCityByIdApiCityIdGetQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Delete a city.
 * @summary Delete City
 */
export const deleteCityApiCityIdDelete = (id: number) => {
  return customInstance<CityRead>({ url: `/api/city/${id}`, method: "DELETE" });
};

export const getDeleteCityApiCityIdDeleteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCityApiCityIdDelete>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCityApiCityIdDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCityApiCityIdDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteCityApiCityIdDelete(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCityApiCityIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCityApiCityIdDelete>>
>;

export type DeleteCityApiCityIdDeleteMutationError = HTTPValidationError;

/**
 * @summary Delete City
 */
export const useDeleteCityApiCityIdDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCityApiCityIdDelete>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCityApiCityIdDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteCityApiCityIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Change the city.
 * @summary Update City
 */
export const updateCityApiCityIdPatch = (
  id: number,
  cityUpdate: CityUpdate,
) => {
  return customInstance<CityRead>({
    url: `/api/city/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: cityUpdate,
  });
};

export const getUpdateCityApiCityIdPatchMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCityApiCityIdPatch>>,
    TError,
    { id: number; data: CityUpdate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCityApiCityIdPatch>>,
  TError,
  { id: number; data: CityUpdate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCityApiCityIdPatch>>,
    { id: number; data: CityUpdate }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateCityApiCityIdPatch(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCityApiCityIdPatchMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCityApiCityIdPatch>>
>;
export type UpdateCityApiCityIdPatchMutationBody = CityUpdate;
export type UpdateCityApiCityIdPatchMutationError = HTTPValidationError;

/**
 * @summary Update City
 */
export const useUpdateCityApiCityIdPatch = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCityApiCityIdPatch>>,
    TError,
    { id: number; data: CityUpdate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCityApiCityIdPatch>>,
  TError,
  { id: number; data: CityUpdate },
  TContext
> => {
  const mutationOptions = getUpdateCityApiCityIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Search cities by name and IATA. Or get information about all cities.
 * @summary Search Cities
 */
export const searchCitiesApiCityGet = (
  params?: SearchCitiesApiCityGetParams,
  signal?: AbortSignal,
) => {
  return customInstance<CitySearch>({
    url: `/api/city/`,
    method: "GET",
    params,
    signal,
  });
};

export const getSearchCitiesApiCityGetQueryKey = (
  params?: SearchCitiesApiCityGetParams,
) => {
  return [`/api/city/`, ...(params ? [params] : [])] as const;
};

export const getSearchCitiesApiCityGetQueryOptions = <
  TData = Awaited<ReturnType<typeof searchCitiesApiCityGet>>,
  TError = HTTPValidationError,
>(
  params?: SearchCitiesApiCityGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchCitiesApiCityGet>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSearchCitiesApiCityGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchCitiesApiCityGet>>
  > = ({ signal }) => searchCitiesApiCityGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchCitiesApiCityGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchCitiesApiCityGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchCitiesApiCityGet>>
>;
export type SearchCitiesApiCityGetQueryError = HTTPValidationError;

/**
 * @summary Search Cities
 */
export const useSearchCitiesApiCityGet = <
  TData = Awaited<ReturnType<typeof searchCitiesApiCityGet>>,
  TError = HTTPValidationError,
>(
  params?: SearchCitiesApiCityGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchCitiesApiCityGet>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSearchCitiesApiCityGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create a new city.
 * @summary Add City
 */
export const addCityApiCityPost = (cityCreate: CityCreate) => {
  return customInstance<CityRead>({
    url: `/api/city/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: cityCreate,
  });
};

export const getAddCityApiCityPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addCityApiCityPost>>,
    TError,
    { data: CityCreate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addCityApiCityPost>>,
  TError,
  { data: CityCreate },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addCityApiCityPost>>,
    { data: CityCreate }
  > = (props) => {
    const { data } = props ?? {};

    return addCityApiCityPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddCityApiCityPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addCityApiCityPost>>
>;
export type AddCityApiCityPostMutationBody = CityCreate;
export type AddCityApiCityPostMutationError = HTTPValidationError;

/**
 * @summary Add City
 */
export const useAddCityApiCityPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addCityApiCityPost>>,
    TError,
    { data: CityCreate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof addCityApiCityPost>>,
  TError,
  { data: CityCreate },
  TContext
> => {
  const mutationOptions = getAddCityApiCityPostMutationOptions(options);

  return useMutation(mutationOptions);
};
