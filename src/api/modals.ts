/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * API Geo
 * OpenAPI spec version: 0.1.0
 */
import * as axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";
export type UpdateTranslateTranslatePatchParams = {
  entity: string;
  entity_id: number;
  language: string;
};

export type DeleteTranslateTranslateDeleteParams = {
  entity: string;
  entity_id: number;
};

export type GetTranslateByIdTranslateGetParams = {
  entity: string;
  entity_id: number;
};

export type SearchMetroMetroGetParams = {
  term?: string | null;
};

export type SearchRailwayRailwayGetParams = {
  term?: string | null;
};

export type SearchAirportAirportGetParams = {
  term?: string | null;
};

export type SearchCitiesCityGetParams = {
  term?: string | null;
};

export type SearchRegionsRegionGetParams = {
  term?: string | null;
};

export type SearchCountriesCountryGetParams = {
  term?: string | null;
};

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export interface UserRead {
  email: string;
  id: number;
  is_active?: boolean;
  is_superuser?: boolean;
  is_verified?: boolean;
  name: string;
}

export type UserCreateIsVerified = boolean | null;

export type UserCreateIsSuperuser = boolean | null;

export type UserCreateIsActive = boolean | null;

export interface UserCreate {
  email: string;
  is_active?: UserCreateIsActive;
  is_superuser?: UserCreateIsSuperuser;
  is_verified?: UserCreateIsVerified;
  name: string;
  password: string;
}

export interface TranslateUpdate {
  translate: string;
}

export interface TranslateRead {
  entity: string;
  entity_id: number;
  language: string;
  last_updated_at: string;
  translate: string;
}

export interface TranslateCreate {
  entity: string;
  entity_id: number;
  language: string;
  translate: string;
}

export type RegionUpdateRegionId = number | null;

export type RegionUpdateOsmType = string | null;

export type RegionUpdateOsmId = number | null;

export type RegionUpdateNeedAutomaticUpdate = boolean | null;

export type RegionUpdateName = string | null;

export interface RegionUpdate {
  name?: RegionUpdateName;
  need_automatic_update?: RegionUpdateNeedAutomaticUpdate;
  osm_id?: RegionUpdateOsmId;
  osm_type?: RegionUpdateOsmType;
  region_id?: RegionUpdateRegionId;
}

export type RegionReadNeedAutomaticUpdate = boolean | null;

export interface RegionRead {
  country_id: number;
  id: number;
  last_updated_at: string;
  name: string;
  need_automatic_update?: RegionReadNeedAutomaticUpdate;
  osm_id: number;
  osm_type: string;
}

export type RegionCreateNeedAutomaticUpdate = boolean | null;

export interface RegionCreate {
  country_id: number;
  name: string;
  need_automatic_update?: RegionCreateNeedAutomaticUpdate;
  osm_id: number;
  osm_type: string;
}

export type RailwayUpdateTimezone = string | null;

export type RailwayUpdateRegionId = number | null;

export type RailwayUpdateOsmType = string | null;

export type RailwayUpdateOsmId = number | null;

export type RailwayUpdateNeedAutomaticUpdate = boolean | null;

export type RailwayUpdateName = string | null;

export type RailwayUpdateLongitude = number | null;

export type RailwayUpdateLatitude = number | null;

export type RailwayUpdateIsMain = boolean | null;

export type RailwayUpdateExpress3Code = number | null;

export type RailwayUpdateCountryId = number | null;

export type RailwayUpdateCityId = number | null;

export interface RailwayUpdate {
  city_id?: RailwayUpdateCityId;
  country_id?: RailwayUpdateCountryId;
  express3_code?: RailwayUpdateExpress3Code;
  is_main?: RailwayUpdateIsMain;
  latitude?: RailwayUpdateLatitude;
  longitude?: RailwayUpdateLongitude;
  name?: RailwayUpdateName;
  need_automatic_update?: RailwayUpdateNeedAutomaticUpdate;
  osm_id?: RailwayUpdateOsmId;
  osm_type?: RailwayUpdateOsmType;
  region_id?: RailwayUpdateRegionId;
  timezone?: RailwayUpdateTimezone;
}

export type RailwayReadRegionId = number | null;

export type RailwayReadNeedAutomaticUpdate = boolean | null;

export type RailwayReadCityId = number | null;

export interface RailwayRead {
  city_id?: RailwayReadCityId;
  country_id: number;
  express3_code: string;
  id: number;
  is_main: boolean;
  last_updated_at: string;
  latitude: number;
  longitude: number;
  name: string;
  need_automatic_update?: RailwayReadNeedAutomaticUpdate;
  osm_id: number;
  osm_type: string;
  region_id?: RailwayReadRegionId;
  timezone: string;
}

export type RailwayCreateRegionId = number | null;

export type RailwayCreateNeedAutomaticUpdate = boolean | null;

export type RailwayCreateCityId = number | null;

export interface RailwayCreate {
  city_id?: RailwayCreateCityId;
  country_id: number;
  express3_code: number;
  is_main: boolean;
  latitude: number;
  longitude: number;
  name: string;
  need_automatic_update?: RailwayCreateNeedAutomaticUpdate;
  osm_id: number;
  osm_type: string;
  region_id?: RailwayCreateRegionId;
  timezone: string;
}

export type MetroUpdateStationName = string | null;

export type MetroUpdateOsmType = string | null;

export type MetroUpdateOsmId = number | null;

export type MetroUpdateNeedAutomaticUpdate = boolean | null;

export type MetroUpdateLongitude = number | null;

export type MetroUpdateLineName = string | null;

export type MetroUpdateLatitude = number | null;

export type MetroUpdateCityId = number | null;

export interface MetroUpdate {
  city_id?: MetroUpdateCityId;
  latitude?: MetroUpdateLatitude;
  line_name?: MetroUpdateLineName;
  longitude?: MetroUpdateLongitude;
  need_automatic_update?: MetroUpdateNeedAutomaticUpdate;
  osm_id?: MetroUpdateOsmId;
  osm_type?: MetroUpdateOsmType;
  station_name?: MetroUpdateStationName;
}

export type MetroReadNeedAutomaticUpdate = boolean | null;

export interface MetroRead {
  city_id: number;
  id: number;
  last_updated_at: string;
  latitude: number;
  line_name: string;
  longitude: number;
  need_automatic_update?: MetroReadNeedAutomaticUpdate;
  osm_id: number;
  osm_type: string;
  station_name: string;
}

export type MetroCreateNeedAutomaticUpdate = boolean | null;

export interface MetroCreate {
  city_id: number;
  latitude: number;
  line_name: string;
  longitude: number;
  need_automatic_update?: MetroCreateNeedAutomaticUpdate;
  osm_id: number;
  osm_type: string;
  station_name: string;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type ErrorModelDetailAnyOf = { [key: string]: string };

export type ErrorModelDetail = string | ErrorModelDetailAnyOf;

export interface ErrorModel {
  detail: ErrorModelDetail;
}

export type CountryUpdatePhoneMask = string | null;

export type CountryUpdatePhoneCode = string | null;

export type CountryUpdateOsmType = string | null;

export type CountryUpdateOsmId = number | null;

export type CountryUpdateNeedAutomaticUpdate = boolean | null;

export type CountryUpdateName = string | null;

export type CountryUpdateIso3166Alpha3 = string | null;

export type CountryUpdateIso3116Alpha2 = string | null;

export interface CountryUpdate {
  iso3116_alpha2?: CountryUpdateIso3116Alpha2;
  iso3166_alpha3?: CountryUpdateIso3166Alpha3;
  name?: CountryUpdateName;
  need_automatic_update?: CountryUpdateNeedAutomaticUpdate;
  osm_id?: CountryUpdateOsmId;
  osm_type?: CountryUpdateOsmType;
  phone_code?: CountryUpdatePhoneCode;
  phone_mask?: CountryUpdatePhoneMask;
}

export type CountryReadNeedAutomaticUpdate = boolean | null;

export interface CountryRead {
  id: number;
  iso3116_alpha2: string;
  iso3166_alpha3: string;
  last_updated_at: string;
  name: string;
  need_automatic_update?: CountryReadNeedAutomaticUpdate;
  osm_id: number;
  osm_type: string;
  phone_code: string;
  phone_mask: string;
}

export type CountryCreateNeedAutomaticUpdate = boolean | null;

export interface CountryCreate {
  iso3116_alpha2: string;
  iso3166_alpha3: string;
  name: string;
  need_automatic_update?: CountryCreateNeedAutomaticUpdate;
  osm_id: number;
  osm_type: string;
  phone_code: string;
  phone_mask: string;
}

export type CityUpdateTimezone = string | null;

export type CityUpdateRegionId = number | null;

export type CityUpdateOsmType = string | null;

export type CityUpdateOsmId = number | null;

export type CityUpdateNeedAutomaticUpdate = boolean | null;

export type CityUpdateName = string | null;

export type CityUpdateLongitude = number | null;

export type CityUpdateLatitude = number | null;

export type CityUpdateIata = string | null;

export type CityUpdateCountryId = number | null;

export interface CityUpdate {
  country_id?: CityUpdateCountryId;
  iata?: CityUpdateIata;
  latitude?: CityUpdateLatitude;
  longitude?: CityUpdateLongitude;
  name?: CityUpdateName;
  need_automatic_update?: CityUpdateNeedAutomaticUpdate;
  osm_id?: CityUpdateOsmId;
  osm_type?: CityUpdateOsmType;
  region_id?: CityUpdateRegionId;
  timezone?: CityUpdateTimezone;
}

export type CityReadNeedAutomaticUpdate = boolean | null;

export type CityReadIata = string | null;

export interface CityRead {
  country_id: number;
  iata?: CityReadIata;
  id: number;
  last_updated_at: string;
  latitude: number;
  longitude: number;
  name: string;
  need_automatic_update?: CityReadNeedAutomaticUpdate;
  osm_id: number;
  osm_type: string;
  region_id: number;
  timezone: string;
}

export type CityCreateNeedAutomaticUpdate = boolean | null;

export type CityCreateIata = string | null;

export interface CityCreate {
  country_id: number;
  iata?: CityCreateIata;
  latitude: number;
  longitude: number;
  name: string;
  need_automatic_update?: CityCreateNeedAutomaticUpdate;
  osm_id: number;
  osm_type: string;
  region_id: number;
  timezone: string;
}

export type BodyAuthJwtLoginAuthLoginPostGrantType = string | null;

export type BodyAuthJwtLoginAuthLoginPostClientSecret = string | null;

export type BodyAuthJwtLoginAuthLoginPostClientId = string | null;

export interface BodyAuthJwtLoginAuthLoginPost {
  client_id?: BodyAuthJwtLoginAuthLoginPostClientId;
  client_secret?: BodyAuthJwtLoginAuthLoginPostClientSecret;
  grant_type?: BodyAuthJwtLoginAuthLoginPostGrantType;
  password: string;
  scope?: string;
  username: string;
}

export type AirportUpdateTimezone = string | null;

export type AirportUpdateOsmType = string | null;

export type AirportUpdateOsmId = number | null;

export type AirportUpdateNeedAutomaticUpdate = boolean | null;

export type AirportUpdateName = string | null;

export type AirportUpdateLongitude = number | null;

export type AirportUpdateLatitude = number | null;

export type AirportUpdateIataRu = string | null;

export type AirportUpdateIataEn = string | null;

export type AirportUpdateCityId = number | null;

export interface AirportUpdate {
  city_id?: AirportUpdateCityId;
  iata_en?: AirportUpdateIataEn;
  iata_ru?: AirportUpdateIataRu;
  latitude?: AirportUpdateLatitude;
  longitude?: AirportUpdateLongitude;
  name?: AirportUpdateName;
  need_automatic_update?: AirportUpdateNeedAutomaticUpdate;
  osm_id?: AirportUpdateOsmId;
  osm_type?: AirportUpdateOsmType;
  timezone?: AirportUpdateTimezone;
}

export type AirportReadNeedAutomaticUpdate = boolean | null;

export type AirportReadIataRu = string | null;

export type AirportReadIataEn = string | null;

export interface AirportRead {
  city_id: number;
  iata_en?: AirportReadIataEn;
  iata_ru?: AirportReadIataRu;
  id: number;
  last_updated_at: string;
  latitude: number;
  longitude: number;
  name: string;
  need_automatic_update?: AirportReadNeedAutomaticUpdate;
  osm_id: number;
  osm_type: string;
  timezone: string;
}

export type AirportCreateNeedAutomaticUpdate = boolean | null;

export type AirportCreateIataRu = string | null;

export type AirportCreateIataEn = string | null;

export interface AirportCreate {
  city_id: number;
  iata_en?: AirportCreateIataEn;
  iata_ru?: AirportCreateIataRu;
  latitude: number;
  longitude: number;
  name: string;
  need_automatic_update?: AirportCreateNeedAutomaticUpdate;
  osm_id: number;
  osm_type: string;
  timezone: string;
}

/**
 * @summary Auth:Jwt.Login
 */
export const authJwtLoginAuthLoginPost = <
  TData = AxiosResponse<unknown | void>,
>(
  bodyAuthJwtLoginAuthLoginPost: BodyAuthJwtLoginAuthLoginPost,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  const formUrlEncoded = new URLSearchParams();
  if (bodyAuthJwtLoginAuthLoginPost.grant_type !== undefined) {
    formUrlEncoded.append(
      "grant_type",
      bodyAuthJwtLoginAuthLoginPost.grant_type as string,
    );
  }
  formUrlEncoded.append("username", bodyAuthJwtLoginAuthLoginPost.username);
  formUrlEncoded.append("password", bodyAuthJwtLoginAuthLoginPost.password);
  if (bodyAuthJwtLoginAuthLoginPost.scope !== undefined) {
    formUrlEncoded.append("scope", bodyAuthJwtLoginAuthLoginPost.scope);
  }
  if (bodyAuthJwtLoginAuthLoginPost.client_id !== undefined) {
    formUrlEncoded.append(
      "client_id",
      bodyAuthJwtLoginAuthLoginPost.client_id as string,
    );
  }
  if (bodyAuthJwtLoginAuthLoginPost.client_secret !== undefined) {
    formUrlEncoded.append(
      "client_secret",
      bodyAuthJwtLoginAuthLoginPost.client_secret as string,
    );
  }

  return axios.default.post(`/auth/login`, formUrlEncoded, options);
};

/**
 * @summary Auth:Jwt.Logout
 */
export const authJwtLogoutAuthLogoutPost = <
  TData = AxiosResponse<unknown | void>,
>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/auth/logout`, undefined, options);
};

/**
 * @summary Register:Register
 */
export const registerRegisterAuthRegisterPost = <
  TData = AxiosResponse<UserRead>,
>(
  userCreate: UserCreate,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/auth/register`, userCreate, options);
};

/**
 * Get full information about the country by ID.
 * @summary Get Country By Id
 */
export const getCountryByIdCountryIdGet = <TData = AxiosResponse<CountryRead>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/country/${id}`, options);
};

/**
 * Delete a country.
 * @summary Delete Country
 */
export const deleteCountryCountryIdDelete = <
  TData = AxiosResponse<CountryRead>,
>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.delete(`/country/${id}`, options);
};

/**
 * Change the country.
 * @summary Update Country
 */
export const updateCountryCountryIdPatch = <TData = AxiosResponse<CountryRead>>(
  id: number,
  countryUpdate: CountryUpdate,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.patch(`/country/${id}`, countryUpdate, options);
};

/**
 * Search countries by name and ISO. Or get information about all countries.
 * @summary Search Countries
 */
export const searchCountriesCountryGet = <TData = AxiosResponse<CountryRead[]>>(
  params?: SearchCountriesCountryGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/country/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Create a new country.
 * @summary Add Country
 */
export const addCountryCountryPost = <TData = AxiosResponse<CountryRead>>(
  countryCreate: CountryCreate,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/country/`, countryCreate, options);
};

/**
 * Get full information about the region by ID.
 * @summary Get Region By Id
 */
export const getRegionByIdRegionIdGet = <TData = AxiosResponse<RegionRead>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/region/${id}`, options);
};

/**
 * Delete a region.
 * @summary Delete Region
 */
export const deleteRegionRegionIdDelete = <TData = AxiosResponse<RegionRead>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.delete(`/region/${id}`, options);
};

/**
 * Change the region.
 * @summary Update Region
 */
export const updateRegionRegionIdPatch = <TData = AxiosResponse<RegionRead>>(
  id: number,
  regionUpdate: RegionUpdate,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.patch(`/region/${id}`, regionUpdate, options);
};

/**
 * Search regions by name. Or get information about all regions.
 * @summary Search Regions
 */
export const searchRegionsRegionGet = <TData = AxiosResponse<RegionRead[]>>(
  params?: SearchRegionsRegionGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/region/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Create a new region.
 * @summary Add Region
 */
export const addRegionRegionPost = <TData = AxiosResponse<RegionRead>>(
  regionCreate: RegionCreate,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/region/`, regionCreate, options);
};

/**
 * Get full information about the city by ID.
 * @summary Get City By Id
 */
export const getCityByIdCityIdGet = <TData = AxiosResponse<CityRead>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/city/${id}`, options);
};

/**
 * Delete a city.
 * @summary Delete City
 */
export const deleteCityCityIdDelete = <TData = AxiosResponse<CityRead>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.delete(`/city/${id}`, options);
};

/**
 * Change the city.
 * @summary Update City
 */
export const updateCityCityIdPatch = <TData = AxiosResponse<CityRead>>(
  id: number,
  cityUpdate: CityUpdate,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.patch(`/city/${id}`, cityUpdate, options);
};

/**
 * Search cities by name and IATA. Or get information about all cities.
 * @summary Search Cities
 */
export const searchCitiesCityGet = <TData = AxiosResponse<CityRead[]>>(
  params?: SearchCitiesCityGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/city/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Create a new city.
 * @summary Add City
 */
export const addCityCityPost = <TData = AxiosResponse<CityRead>>(
  cityCreate: CityCreate,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/city/`, cityCreate, options);
};

/**
 * Get full information about the city by ID.
 * @summary Get Airport By Id
 */
export const getAirportByIdAirportIdGet = <TData = AxiosResponse<AirportRead>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/airport/${id}`, options);
};

/**
 * Delete a airport.
 * @summary Delete Airport
 */
export const deleteAirportAirportIdDelete = <
  TData = AxiosResponse<AirportRead>,
>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.delete(`/airport/${id}`, options);
};

/**
 * Change the airport.
 * @summary Update Airport
 */
export const updateAirportAirportIdPatch = <TData = AxiosResponse<AirportRead>>(
  id: number,
  airportUpdate: AirportUpdate,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.patch(`/airport/${id}`, airportUpdate, options);
};

/**
 * Search airports by name and IATA. Or get information about all airports.
 * @summary Search Airport
 */
export const searchAirportAirportGet = <TData = AxiosResponse<AirportRead[]>>(
  params?: SearchAirportAirportGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/airport/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Create a new airport.
 * @summary Add Airporty
 */
export const addAirportyAirportPost = <TData = AxiosResponse<AirportRead>>(
  airportCreate: AirportCreate,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/airport/`, airportCreate, options);
};

/**
 * Get full information about the railway station by ID.
 * @summary Get Railway By Id
 */
export const getRailwayByIdRailwayIdGet = <TData = AxiosResponse<RailwayRead>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/railway/${id}`, options);
};

/**
 * Delete a railway station.
 * @summary Delete Railway
 */
export const deleteRailwayRailwayIdDelete = <
  TData = AxiosResponse<RailwayRead>,
>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.delete(`/railway/${id}`, options);
};

/**
 * Change the railway station.
 * @summary Update Railway
 */
export const updateRailwayRailwayIdPatch = <TData = AxiosResponse<RailwayRead>>(
  id: number,
  railwayUpdate: RailwayUpdate,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.patch(`/railway/${id}`, railwayUpdate, options);
};

/**
 * Search railway by name and express3 code. Or get information about all railways.
 * @summary Search Railway
 */
export const searchRailwayRailwayGet = <TData = AxiosResponse<RailwayRead[]>>(
  params?: SearchRailwayRailwayGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/railway/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Create a new railway station.
 * @summary Add Railway
 */
export const addRailwayRailwayPost = <TData = AxiosResponse<RailwayRead>>(
  railwayCreate: RailwayCreate,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/railway/`, railwayCreate, options);
};

/**
 * Get full information about the metro by ID.
 * @summary Get Metro By Id
 */
export const getMetroByIdMetroIdGet = <TData = AxiosResponse<MetroRead>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/metro/${id}`, options);
};

/**
 * Delete a metro.
 * @summary Delete City
 */
export const deleteCityMetroIdDelete = <TData = AxiosResponse<MetroRead>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.delete(`/metro/${id}`, options);
};

/**
 * Change the metro.
 * @summary Update Metro
 */
export const updateMetroMetroIdPatch = <TData = AxiosResponse<MetroRead>>(
  id: number,
  metroUpdate: MetroUpdate,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.patch(`/metro/${id}`, metroUpdate, options);
};

/**
 * Search metro by station name. Or get information about all metros.
 * @summary Search Metro
 */
export const searchMetroMetroGet = <TData = AxiosResponse<MetroRead[]>>(
  params?: SearchMetroMetroGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/metro/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Create a new metro.
 * @summary Add Metro
 */
export const addMetroMetroPost = <TData = AxiosResponse<MetroRead>>(
  metroCreate: MetroCreate,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/metro/`, metroCreate, options);
};

/**
 * Get all translations about entity by entity name and ID.
 * @summary Get Translate By Id
 */
export const getTranslateByIdTranslateGet = <
  TData = AxiosResponse<TranslateRead[]>,
>(
  params: GetTranslateByIdTranslateGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/translate/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Create a new translate.
 * @summary Add Translate
 */
export const addTranslateTranslatePost = <
  TData = AxiosResponse<TranslateRead[]>,
>(
  translateCreate: TranslateCreate[],
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/translate/`, translateCreate, options);
};

/**
 * Delete all translations about entity by entity name and ID.
 * @summary Delete Translate
 */
export const deleteTranslateTranslateDelete = <
  TData = AxiosResponse<TranslateRead[]>,
>(
  params: DeleteTranslateTranslateDeleteParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.delete(`/translate/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Change the translate.
 * @summary Update Translate
 */
export const updateTranslateTranslatePatch = <
  TData = AxiosResponse<TranslateRead>,
>(
  translateUpdate: TranslateUpdate,
  params: UpdateTranslateTranslatePatchParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.patch(`/translate/`, translateUpdate, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export type AuthJwtLoginAuthLoginPostResult = AxiosResponse<unknown | void>;
export type AuthJwtLogoutAuthLogoutPostResult = AxiosResponse<unknown | void>;
export type RegisterRegisterAuthRegisterPostResult = AxiosResponse<UserRead>;
export type GetCountryByIdCountryIdGetResult = AxiosResponse<CountryRead>;
export type DeleteCountryCountryIdDeleteResult = AxiosResponse<CountryRead>;
export type UpdateCountryCountryIdPatchResult = AxiosResponse<CountryRead>;
export type SearchCountriesCountryGetResult = AxiosResponse<CountryRead[]>;
export type AddCountryCountryPostResult = AxiosResponse<CountryRead>;
export type GetRegionByIdRegionIdGetResult = AxiosResponse<RegionRead>;
export type DeleteRegionRegionIdDeleteResult = AxiosResponse<RegionRead>;
export type UpdateRegionRegionIdPatchResult = AxiosResponse<RegionRead>;
export type SearchRegionsRegionGetResult = AxiosResponse<RegionRead[]>;
export type AddRegionRegionPostResult = AxiosResponse<RegionRead>;
export type GetCityByIdCityIdGetResult = AxiosResponse<CityRead>;
export type DeleteCityCityIdDeleteResult = AxiosResponse<CityRead>;
export type UpdateCityCityIdPatchResult = AxiosResponse<CityRead>;
export type SearchCitiesCityGetResult = AxiosResponse<CityRead[]>;
export type AddCityCityPostResult = AxiosResponse<CityRead>;
export type GetAirportByIdAirportIdGetResult = AxiosResponse<AirportRead>;
export type DeleteAirportAirportIdDeleteResult = AxiosResponse<AirportRead>;
export type UpdateAirportAirportIdPatchResult = AxiosResponse<AirportRead>;
export type SearchAirportAirportGetResult = AxiosResponse<AirportRead[]>;
export type AddAirportyAirportPostResult = AxiosResponse<AirportRead>;
export type GetRailwayByIdRailwayIdGetResult = AxiosResponse<RailwayRead>;
export type DeleteRailwayRailwayIdDeleteResult = AxiosResponse<RailwayRead>;
export type UpdateRailwayRailwayIdPatchResult = AxiosResponse<RailwayRead>;
export type SearchRailwayRailwayGetResult = AxiosResponse<RailwayRead[]>;
export type AddRailwayRailwayPostResult = AxiosResponse<RailwayRead>;
export type GetMetroByIdMetroIdGetResult = AxiosResponse<MetroRead>;
export type DeleteCityMetroIdDeleteResult = AxiosResponse<MetroRead>;
export type UpdateMetroMetroIdPatchResult = AxiosResponse<MetroRead>;
export type SearchMetroMetroGetResult = AxiosResponse<MetroRead[]>;
export type AddMetroMetroPostResult = AxiosResponse<MetroRead>;
export type GetTranslateByIdTranslateGetResult = AxiosResponse<TranslateRead[]>;
export type AddTranslateTranslatePostResult = AxiosResponse<TranslateRead[]>;
export type DeleteTranslateTranslateDeleteResult = AxiosResponse<
  TranslateRead[]
>;
export type UpdateTranslateTranslatePatchResult = AxiosResponse<TranslateRead>;
